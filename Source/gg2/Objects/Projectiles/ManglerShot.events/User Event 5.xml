<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="15">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{  
    if(characterHit.id != ownerPlayer.object)
    {
        if(exploded)
            exit;
        else
            exploded = true;
        if(characterHit != -1) {
            if(characterHit.team != team || characterHit.id == ownerPlayer.object  &amp;&amp; characterHit.ubered == 0 &amp;&amp; !characterHit.radioactive) {
                if !characterHit.invincible characterHit.hp -= hitDamage*(1+characterHit.pissed*0.35)*crit;
                characterHit.timeUnscathed = 0;
                if object_is_ancestor(characterHit.object_index, Character) {
                    if (characterHit.lastDamageDealer != ownerPlayer &amp;&amp; characterHit.lastDamageDealer != characterHit.player){
                        characterHit.secondToLastDamageDealer = characterHit.lastDamageDealer;
                        characterHit.alarm[4] = characterHit.alarm[3]
                    }
                    characterHit.alarm[3] = ASSIST_TIME;
                }
                characterHit.lastDamageDealer = ownerPlayer;
                characterHit.lastDamageSource = weapon;
                characterHit.lastDamageCrit = crit;
            } else if characterHit.radioactive {
                var text;
                text=instance_create(x,y,Text);
                text=sprite_index = MissS
            }
        }
        instance_create(x,y,Explosion);
        playsound(x,y,ExplosionSnd);
        
        with (Character) {
            if (distance_to_object(other) &lt; other.blastRadius and !(team == other.team and id != other.ownerPlayer.object and place_meeting(x, y+1, Obstacle))){
                var rdir, vectorfactor;
                rdir = point_direction(other.x,other.y,x,y);
                vectorfactor = point_distance(0, 0, power(sin(degtorad(rdir)), 2), power(cos(degtorad(rdir)), 2));
                motion_add(rdir, min(15, other.knockback-other.knockback*(distance_to_object(other)/other.blastRadius)) * vectorfactor);
                if(!ubered and hp &gt; 0 &amp;&amp; !radioactive)
                {
                    if (other.team != team) or (id==other.ownerPlayer.object)
                    {
                        if other.crit &gt;= CRIT_FACTOR {
                            if(!object_is_ancestor(object_index, Pyro) &amp;&amp; !invincible) {
                                if (burnDuration &lt; maxDuration) {
                                    burnDuration += 30*6; 
                                    burnDuration = min(burnDuration, maxDuration);
                                }
                                if (burnIntensity &lt; maxIntensity) {
                                    burnIntensity += other.burnIncrease * 3;
                                    burnIntensity = min(burnIntensity, maxIntensity);
                                }
                                burnedBy = other.ownerPlayer;
                                afterburnSource = WEAPON_COWMANGLERFIRE;
                                alarm[0] = decayDelay;
                            }
                        }
                        if !invincible hp -= other.explosionDamage*sqr((1-(distance_to_object(other)/other.blastRadius)))*(1+pissed*0.35)*other.crit;
                        timeUnscathed = 0;
                        if(id == other.ownerPlayer.object and lastDamageDealer != -1 and lastDamageDealer != other.ownerPlayer)
                        {
                            lastDamageSource = WEAPON_COWMANGLER;
                        }
                        else 
                        {
                            if (lastDamageDealer != other.ownerPlayer &amp;&amp; lastDamageDealer != player){
                                secondToLastDamageDealer = lastDamageDealer;
                                alarm[4] = alarm[3]
                            }
                            if (other.ownerPlayer != id)
                                alarm[3] = ASSIST_TIME;
                            lastDamageDealer = other.ownerPlayer;
                            lastDamageSource = other.weapon;
                            lastDamageCrit = other.crit;
                        }
                        cloakAlpha = min(cloakAlpha + 0.1, 1);
                    }
                    if id==other.ownerPlayer.object and other.team == team {
                        moveStatus = 1;
                        speed*=1.06;
                    }else if other.team == team and (id!=other.ownerPlayer.object){
                        moveStatus = 4;
                            if point_direction(x,y+5,other.x,other.y-5)&gt;210 and point_direction(x,y,other.x,other.y)&lt;330 {
                            vspeed-=4*(1-(distance_to_object(other)/other.blastRadius));
                            speed*=1.3;
                        }
                    } else {
                        moveStatus = 2;
                        if point_direction(x,y+5,other.x,other.y-5)&gt;210 and point_direction(x,y,other.x,other.y)&lt;330 {
                            vspeed-=4*(1-(distance_to_object(other)/other.blastRadius));
                            speed*=1.3;
                        }
                    }
                    if(global.gibLevel &gt; 0) {
                        if (id==other.ownerPlayer.object) or (other.team!=team) {
                            repeat(3) {
                                var blood;
                                blood = instance_create(x,y,Blood);
                                blood.direction = point_direction(other.x,other.y,x,y)-180;
                            }
                        }
                    }
                } else if radioactive {
                    var text;
                    text=instance_create(x,y,Text);
                    text=sprite_index = MissS
                }
            }
        }

        with (Sentry) {
            if (distance_to_object(other) &lt; other.blastRadius){
                if(other.team != team) {
                    hp -= other.explosionDamage*sqr((1-(distance_to_object(other)/other.blastRadius)))*other.crit*0.2;
                    if other.crit == 1.5 &amp;&amp; currentWeapon != -1 currentWeapon.alarm[0] = 30*4;
                    lastDamageDealer = other.ownerPlayer;
                    lastDamageSource = other.weapon;
                    lastDamageCrit = other.crit;
                }
            }
        }        
        
        with (Generator) {
            if (distance_to_object(other) &lt; other.blastRadius){
                if(other.team != team) {
                    alarm[0] = regenerationBuffer;
                    isShieldRegenerating = false;
                    //allow overkill to be applied directly to the target
                    var hitDamage;
                    hitDamage = other.explosionDamage*sqr((1-(distance_to_object(other)/other.blastRadius)))*other.crit;
                    if (hitDamage &gt; shieldHp) {
                        hp -= hitDamage - shieldHp;
                        hp -= shieldHp * shieldResistance;
                        shieldHp = 0;
                    } else {
                        hp -= hitDamage * shieldResistance;
                        shieldHp -= hitDamage;
                    }
                    
                    lastDamageDealer = other.ownerPlayer;
                    lastDamageSource = other.weapon;
                    lastDamageCrit = other.crit;
                }
            }
        }
        
        with (DeadGuy) {
          if (distance_to_object(other) &lt; other.blastRadius){
            motion_add(point_direction(other.x,other.y,x,y),10-10*(distance_to_object(other)/other.blastRadius));
          }
        }
        
        with (Gib) {
            if (distance_to_object(other) &lt; other.blastRadius){
                motion_add(point_direction(other.x,other.y,x,y),15-15*(distance_to_object(other)/other.blastRadius));
                rotspeed=random(151)-75;
            }
        }
    
        with(Mine) {
            if (distance_to_object(other) &lt; other.blastRadius*0.66 and (other.team != team or other.ownerPlayer == ownerPlayer)){
                event_user(2);
            }
        }
        
        with(LooseSheet) {
            if (distance_to_object(other) &lt; other.blastRadius){
                motion_add(point_direction(other.x,other.y,x,y),10-10*(distance_to_object(other)/other.blastRadius));
            }
        }
        
        with(Bubble) {
            if (distance_to_object(other) &lt; other.blastRadius*0.66){
                alarm[0]-=200;
            }    
        }

        instance_destroy();
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
