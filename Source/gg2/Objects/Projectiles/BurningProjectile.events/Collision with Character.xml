<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="COLLISION" with="Character">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if(other.id != ownerPlayer.object and other.team != team &amp;&amp; other.ubered == 0  &amp;&amp; other.hp &gt; 0) {
    if other.radioactive {
        var text;
        text=instance_create(x,y,Text);
        text=sprite_index = MissS
        instance_destroy();
        exit;
    }
    if instance_exists(ownerPlayer)
        if ownerPlayer.object != -1 ownerPlayer.object.phlogDmg+=hitDamage*(1+other.pissed*0.35)*crit;
    if !other.invincible other.hp -= hitDamage*(1+other.pissed*0.35)*crit;
    other.timeUnscathed = 0;
    if (other.lastDamageDealer != ownerPlayer &amp;&amp; other.lastDamageDealer != other.player){
        other.secondToLastDamageDealer = other.lastDamageDealer;
        other.alarm[4] = other.alarm[3];
    }
    other.alarm[3] = ASSIST_TIME;
    other.lastDamageDealer = ownerPlayer;
    other.lastDamageSource = weapon;
    other.lastDamageCrit = crit;
    
    if(!object_is_ancestor(other.object_index, Pyro) &amp;&amp; !other.invincible) {
        if variable_local_exists("isSnowflake") other.frozen = true;
        else other.frozen = false;
        if (other.burnDuration &lt; other.maxDuration) {
            other.burnDuration += durationIncrease; 
            other.burnDuration = min(other.burnDuration, other.maxDuration);
        }
        if (other.burnIntensity &lt; other.maxIntensity) {
            var falloffFactor;
            if(afterburnFalloff)
                falloffFactor = cos((flameLife - alarm[0])/flameLife * pi / 2);
            else
                falloffFactor = 1;
            other.burnIntensity += burnIncrease * falloffFactor;
            other.burnIntensity = min(other.burnIntensity, other.maxIntensity);
        }
        other.burnedBy = ownerPlayer;
        other.afterburnSource = weapon;
        other.alarm[0] = other.decayDelay;
    }
    instance_destroy();
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
