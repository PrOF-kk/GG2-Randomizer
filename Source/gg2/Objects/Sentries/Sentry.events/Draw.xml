<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if team == TEAM_BLUE index = 6;
else index = 0;
if sapped &lt;= 0 sprite_index = sprite[index+level];
else {
    sprite_index = sappedSprite[level];
    image_index = floor(sapindex+team*2);
}
xr = round(x);
yr = round(y);
if global.myself.team == team {
    draw_healthbar(xr-10, yr-30, xr+10, yr-25,hp*100/maxHp,c_black,c_red,c_green,0,true,true);
    if upgraded &gt; 0 &amp;&amp; level &lt; 2 draw_healthbar(xr-10, yr-35, xr+10, yr-30,upgraded,c_black,c_white,c_white,0,true,true);
}
if (built &amp;&amp; hp &lt; .75 * maxHp) draw_sprite_part_ext(FlameS, random(4), 0, 0, 21, 9, xr-21/2, yr-15, 1, 1, c_white, 1 - (hp / maxHp));
draw_sprite_ext(sprite_index,image_index,xr,yr,image_xscale,image_yscale,image_angle,c_white,1);

if(distance_to_point(mouse_x, mouse_y)&lt;25 &amp;&amp; global.myself.team == team) {
    draw_set_alpha(1);   
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom); 
    if(team==TEAM_RED) {
        draw_set_color(c_red);
    } else {
        draw_set_color(c_blue);
    }
    draw_text(xr, yr-45, ownerPlayer.name + "'s");
    switch(level) {
        case 0:
            draw_text(xr, yr-35, "Autogun");
            break;
        case 1: 
            draw_text(xr, yr-35, " Lvl2 autogun");
            break;
        case 2:
            draw_text(xr, yr-35, "Lvl3 autogun");
            break;
        case 3:
            draw_text(xr, yr-35, "Mini-autogun");
            break;
        case 4:
            draw_text(xr, yr-35, "Autocrossbow");
            break;
        default:
            draw_text(xr, yr-35, "Provisioner");
            break;
    }
}  

if level == 5 &amp;&amp; built == 1 &amp;&amp; !sapped &amp;&amp; !humiliated {
    with(Character) {
        if player.team == other.team &amp;&amp; 
        point_distance(x,y,other.x,other.y) &lt; 100 &amp;&amp; 
        collision_line(x,y,other.x,other.y,Obstacle,true,true) &lt;= 0 {
            var healthGained;
            healthGained = 0.25 * calculateHealingFactor(timeUnscathed);
            hp = min(hp + healthGained, maxHp);
            other.hphealed += healthGained;
            other.ownerPlayer.stats[HEALING] += healthGained;
            other.ownerPlayer.roundStats[HEALING] += healthGained;                              
            if other.hphealed &gt;= HP_PER_POINT {
                other.ownerPlayer.stats[POINTS] += 1;
                other.ownerPlayer.roundStats[POINTS] += 1;
                other.hphealed -= HP_PER_POINT;
            }
            if nutsNBolts &lt; 100 nutsNBolts += 0.1;
            else if nutsNBolts &gt; 100 nutsNBolts = 100; 
            var color;
            if(player.team == TEAM_RED)
                color = c_red;
            else
                color = c_blue;   
            draw_set_alpha(0.3);
            draw_line_width_color(other.x,other.y,x, y, 5, color, color);
        } 
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
