<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="2">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">var targetQueue, testDist, playercheck, targetAngle, obscured, rotateoffset;

if ownerPlayer.sentry != -1 {
    if x != ownerPlayer.sentry.x x = ownerPlayer.sentry.x;
    if y != ownerPlayer.sentry.y y = ownerPlayer.sentry.y;
}
else if ownerPlayer.sentry == -1 instance_destroy();

if !wrangled {
    if(((direction+270) mod 360)&gt;180) {
        image_xscale=1;
        image_angle = direction;
    } else {
        image_xscale=-1;
        image_angle = direction+180;
    }
    nearestTarget = -1;
    targetQueue = ds_priority_create();
    
    // Build a queue of potential targets
    with(Character) {
        testDist = distance_to_object(other);
        if(!cloak &amp;&amp; testDist&lt;=375) {
            ds_priority_add(targetQueue, id, testDist);
        }
    }
    
    with(Sentry) {
        testDist = distance_to_object(other);
        if(testDist&lt;=375) {
            ds_priority_add(targetQueue, id, testDist);
        }
    }
    
    while(nearestTarget == -1 &amp;&amp; !ds_priority_empty(targetQueue)) {
        playercheck = ds_priority_delete_min(targetQueue);
        targetAngle = point_direction(x,y,playercheck.x,playercheck.y);
        if((targetAngle &lt;= 45 || targetAngle &gt;= 315 || (targetAngle &gt;= 135 &amp;&amp; targetAngle &lt;= 225) || place_meeting(x,y,playercheck)) 
            &amp;&amp; playercheck.team != team 
            &amp;&amp; playercheck.hp &gt; 0
            &amp;&amp; collision_line(x,y,playercheck.x,playercheck.y,Obstacle,true,true)&lt;0
            &amp;&amp; collision_line(x,y,playercheck.x,playercheck.y,TeamGate,true,true)&lt;0
            &amp;&amp; collision_line(x,y,playercheck.x,playercheck.y,IntelGate,true,true)&lt;0
            &amp;&amp; collision_line(x,y,playercheck.x,playercheck.y,BulletWall,true,true)&lt;0) {
                var setupGateCheck, blockedBySetupGate;
                setupGateCheck = collision_line(x,y,playercheck.x,playercheck.y,ControlPointSetupGate,true,true);
                blockedBySetupGate = true;
                if (setupGateCheck&lt;0) { blockedBySetupGate = false; }
                else if (setupGateCheck.solid == false) { blockedBySetupGate = false; }
                if (!blockedBySetupGate) {
                    // Target looks valid, but it might be obscured by a sentry.
                    // That has to be tested individually because we have to exclude both this sentry and the target
                    // from the collision check
                    obscured = false;
                    with(Sentry) {
                        if(!obscured &amp;&amp; id != other.ownerPlayer.sentry &amp;&amp; id != playercheck &amp;&amp; collision_line(other.x,other.y,playercheck.x,playercheck.y,id,false,false)&gt;=0) {
                            obscured = true;
                        }
                    }
                    if(!obscured) {
                        nearestTarget = playercheck;
                    }
                }
            }
    }
    ds_priority_destroy(targetQueue);
    
    if(nearestTarget == -1) {
        noticedTarget = true;
        if image_xscale != startDirection {
            rotating=true;
        }
    } else {
        // set cloaked spy as target if they're in the way
        with(Spy) {
            if(team != other.team &amp;&amp; collision_line(other.x,other.y,other.nearestTarget.x,other.nearestTarget.y,id,true,false)&gt;=0) {
                other.nearestTarget = id;
            }
        }
        
        if(nearestTarget.x &lt; x &amp;&amp; image_xscale == 1) {
            rotating=true;
        } else if(nearestTarget.x &gt; x &amp;&amp; image_xscale == -1) {
            rotating=true;
        }    
            
        if (noticedTarget == true) {
            playsound(x,y,SentryAlert);
            readyToShoot = false;
            alarm[0] = reloadTime*2;
        }    
        
        noticedTarget = false;
        
        if(readyToShoot &amp;&amp; (rotating == false)) {
            direction = point_direction(x,y,nearestTarget.x,nearestTarget.y);
            
            // Prevent the turret from turning too high even if it is shooting in that direction.
            // This hides the exception to the angle restriction that occurs when a player is standing
            // directly on the sentry gun. 
            if(direction&gt;45 and direction&lt;90) direction=45;
            else if(direction&lt;135 and direction&gt;90) direction=135;
            else if(direction&gt;225 and direction&lt;270) direction=225;
            else if(direction&lt;315 and direction&gt;270) direction=315;
            
            if ammo &gt; 0 playsound(x,y,SentryShotSnd);
            ownerPlayer.sentry.idleTimer = false;
            ownerPlayer.sentry.alarm[5] = 30;
            
            if(nearestTarget.ubered == 0) &amp;&amp; ammo &gt; 0 {
                if nearestTarget.radioactive {
                    var text;
                    text=instance_create(nearestTarget.x,nearestTarget.y,Text);
                    text=sprite_index = MissS
                } else if !nearestTarget.invincible nearestTarget.hp -= hitDamage;
                nearestTarget.timeUnscathed = 0;
                if (nearestTarget.lastDamageDealer != ownerPlayer &amp;&amp; object_is_ancestor(nearestTarget.object_index, Character)) {
                    if (nearestTarget.lastDamageDealer != nearestTarget.player){
                        nearestTarget.secondToLastDamageDealer = nearestTarget.lastDamageDealer;
                        nearestTarget.alarm[4] = nearestTarget.alarm[3]
                    }
                }
                nearestTarget.alarm[3] = ASSIST_TIME;
                nearestTarget.lastDamageDealer = ownerPlayer;
                nearestTarget.lastDamageSource = WEAPON_SENTRYTURRET;
                if(global.gibLevel &gt; 0 &amp;&amp; object_is_ancestor(nearestTarget.object_index, Character)){
                    blood = instance_create(nearestTarget.x,nearestTarget.y,Blood);
                    blood.direction = direction-180;
                }
            }
            if ammo &gt; 0 shooting=true;
            justShot=true;  
            readyToShoot=false;
            alarm[0]=reloadTime;
        }
    }
} else {
    if ownerPlayer.object != -1 &amp;&amp; !rotating direction = ownerPlayer.object.aimDirection;
    if(direction&gt;45 and direction&lt;90) direction=45;
    else if(direction&lt;135 and direction&gt;90) direction=135;
    else if(direction&gt;225 and direction&lt;270) direction=225;
    else if(direction&lt;315 and direction&gt;270) direction=315;
    
    if(((direction+270) mod 360)&gt;180) {
        if image_xscale == -1 rotating = true;
        image_angle = direction;
    } else {
        if image_xscale == 1 rotating = true;
        image_angle = direction+180;
    }
        
    if readyToShoot &amp;&amp; !rotating &amp;&amp; ownerPlayer.object != -1{
        ownerPlayer.object.currentWeapon.ammoCount -= 1;
        if ownerPlayer.object.currentWeapon.ammoCount &lt;= 0 ammo = 0;
        shooting=true;
        justShot=true;  
        readyToShoot=false;
        playsound(x,y,SentryShotSnd);
        var hit;
        var x1,y1,xm,ym, len;
        var hitline;
        len=750;
        x1=x;
        y1=y;
        x2=x+lengthdir_x(len,direction);
        y2=y+lengthdir_y(len,direction);
        
        while(len&gt;1) {
            xm=(x1+x2)/2;
            ym=(y1+y2)/2;
            
            hitline = false;
            with(ownerPlayer.sentry) {
                if (collision_line(x1,y1,xm,ym,Generator,true,true)&gt;=0) {
                    hitline = true;
                    if instance_nearest(x1,y1,Generator).team == team hitline = false;
                }
                if(collision_line(x1,y1,xm,ym,Obstacle,true,true)&gt;=0) {
                    hitline = true;
                } else if (collision_line(x1,y1,xm,ym,Character,true,true)&gt;=0) {
                    hitline = true;
                } else if (collision_line(x1,y1,xm,ym,Sentry,true,true)&gt;=0) {
                    hitline = true;
                } else if (collision_line(x1,y1,xm,ym,TeamGate,true,true)&gt;=0) {
                    hitline = true;
                } else if (collision_line(x1,y1,xm,ym,IntelGate,true,true)&gt;=0) {
                    hitline = true;
                } else if (collision_line(x1,y1,xm,ym,ControlPointSetupGate,true,true)&gt;=0) {
                    if ControlPointSetupGate.solid == true hitline = true;
                } else if (collision_line(x1,y1,xm,ym,BulletWall,true,true)&gt;=0) {
                    hitline = true;
                } 
            }
            
            if(hitline) {
                x2=xm;
                y2=ym;
            } else {
                x1=xm;
                y1=ym;
            }
            len/=2;
        }
        
        with(Player) {
            if(id != other.ownerPlayer and team != other.team and object != -1) {
                if(collision_line(other.x,other.y,other.x2,other.y2,object,true,false)&gt;=0) &amp;&amp; object.ubered == 0 {
                    if object.radioactive {
                        var text;
                        text=instance_create(x,y,Text);
                        text.sprite_index = MissS;
                    } else {
                        if !object.radioactive object.hp -= other.hitDamage*2*other.ownerPlayer.object.currentWeapon.crit;
                        object.timeUnscathed = 0;
                //new
                        if (object.lastDamageDealer != other.ownerPlayer &amp;&amp; object.lastDamageDealer != object.player){
                            object.secondToLastDamageDealer = object.lastDamageDealer;
                            object.alarm[4] = object.alarm[3]
                        }
                        object.alarm[3] = ASSIST_TIME;
                //end
                        object.lastDamageDealer = other.ownerPlayer;
                        object.cloakAlpha = min(object.cloakAlpha + 0.3, 1);
                        
                //new
                    if(global.gibLevel &gt; 0) {
                        blood = instance_create(object.x,object.y,Blood);
                        blood.direction = other.direction-180;
                    }
                    object.lastDamageSource = WEAPON_WRANGLER;
                    }
                }
            }
        }
        
        with(Sentry) {
            if(team != other.ownerPlayer.team) {
                if(collision_line(other.x,other.y,other.x2,other.y2,id,false,false)&gt;=0) {
                    hp -= other.hitDamage*2;
                    lastDamageDealer = other.ownerPlayer;
                //new
                lastDamageSource = WEAPON_WRANGLER;
                }
            }
        }
        
        with(Generator) {
            if(team != other.ownerPlayer.team) {
                if(collision_line(other.x,other.y,other.x2,other.y2,id,true,false)&gt;=0) {
                    hp -= other.hitDamage*2;
                    exit;
                }
            }
        }
    }
}

if(rotating) {
    rotateindex += 0.3;
    if(rotateindex &gt;= rotateend) {
        image_xscale = -image_xscale;
        direction += 180;
        rotating = false;
        rotateindex = rotatestart;
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
